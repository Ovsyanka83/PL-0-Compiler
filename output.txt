
printRawLexemeList()
Raw Lexeme List:
29 2 x 17 2 y 17 2 z 17 2 v 17 2 w 18 30 2 a 18 29 2 x 17 2 y 17 2 u 17 2 v 18 30 2 b 18 29 2 y 17 2 z 17 2 v 18 30 2 c 18 29 2 y 17 2 z 18 21 2 z 20 3 1 18 2 x 20 2 y 4 2 z 4 2 w 22 18 21 2 y 20 2 x 4 2 u 4 2 w 18 27 2 c 22 18 21 2 z 20 3 2 18 2 u 20 2 z 4 2 w 18 27 2 b 22 18 21 2 x 20 3 1 18 2 y 20 3 2 18 2 z 20 3 3 18 2 v 20 3 4 18 2 w 20 3 5 18 2 x 20 2 v 4 2 w 18 31 2 z 18 27 2 a 18 22 19 


printFormattedLexemeList()
Formatted Lexeme List:
varsym identsym x commasym identsym y commasym identsym z commasym identsym v commasym identsym w semicolonsym procsym identsym a semicolonsym varsym identsym x commasym identsym y commasym identsym u commasym identsym v semicolonsym procsym identsym b semicolonsym varsym identsym y commasym identsym z commasym identsym v semicolonsym procsym identsym c semicolonsym varsym identsym y commasym identsym z semicolonsym beginsym identsym z becomessym numbersym 1 semicolonsym identsym x becomessym identsym y plussym identsym z plussym identsym w endsym semicolonsym beginsym identsym y becomessym identsym x plussym identsym u plussym identsym w semicolonsym callsym identsym c endsym semicolonsym beginsym identsym z becomessym numbersym 2 semicolonsym identsym u becomessym identsym z plussym identsym w semicolonsym callsym identsym b endsym semicolonsym beginsym identsym x becomessym numbersym 1 semicolonsym identsym y becomessym numbersym 2 semicolonsym identsym z becomessym numbersym 3 semicolonsym identsym v becomessym numbersym 4 semicolonsym identsym w becomessym numbersym 5 semicolonsym identsym x becomessym identsym v plussym identsym w semicolonsym writesym identsym z semicolonsym callsym identsym a semicolonsym endsym periodsym 


buildSymbolTable()

block()
var
constDeclaration()

/constDeclaration()

varDeclaration()
x,y,z,v,w;procedure
/varDeclaration()

procedureDeclaration()
a;
block()
var
constDeclaration()

/constDeclaration()

varDeclaration()
x,y,u,v;procedure
/varDeclaration()

procedureDeclaration()
b;
block()
var
constDeclaration()

/constDeclaration()

varDeclaration()
y,z,v;procedure
/varDeclaration()

procedureDeclaration()
c;
block()
var
constDeclaration()

/constDeclaration()

varDeclaration()
y,z;begin
/varDeclaration()

procedureDeclaration()

/procedureDeclaration()

statement()
z
statement()
:=1
expression()

term()

factor()
;
/factor()

/term()

/expression()

/statement()
x
statement()
:=y
expression()

term()

factor()
+
/factor()

/term()
z
term()

factor()
+
/factor()

/term()
w
term()

factor()
end
/factor()

/term()

/expression()

/statement()
;
/statement()

/block()
begin
/procedureDeclaration()

statement()
y
statement()
:=x
expression()

term()

factor()
+
/factor()

/term()
u
term()

factor()
+
/factor()

/term()
w
term()

factor()
;
/factor()

/term()

/expression()

/statement()
call
statement()
cend
/statement()
;
/statement()

/block()
begin
/procedureDeclaration()

statement()
z
statement()
:=2
expression()

term()

factor()
;
/factor()

/term()

/expression()

/statement()
u
statement()
:=z
expression()

term()

factor()
+
/factor()

/term()
w
term()

factor()
;
/factor()

/term()

/expression()

/statement()
call
statement()
bend
/statement()
;
/statement()

/block()
begin
/procedureDeclaration()

statement()
x
statement()
:=1
expression()

term()

factor()
;
/factor()

/term()

/expression()

/statement()
y
statement()
:=2
expression()

term()

factor()
;
/factor()

/term()

/expression()

/statement()
z
statement()
:=3
expression()

term()

factor()
;
/factor()

/term()

/expression()

/statement()
v
statement()
:=4
expression()

term()

factor()
;
/factor()

/term()

/expression()

/statement()
w
statement()
:=5
expression()

term()

factor()
;
/factor()

/term()

/expression()

/statement()
x
statement()
:=v
expression()

term()

factor()
+
/factor()

/term()
w
term()

factor()
;
/factor()

/term()

/expression()

/statement()
write
statement()
z;
/statement()
call
statement()
a;
/statement()
end
statement()

/statement()
.
/statement()

/block()

No errors, program is syntactically correct.

printSymbolTable()

Lexeme Table:
symbol		kind		val		level		addr		mark
main		3		0		0		0		0
x		2		0		0		3		1
y		2		0		0		4		1
z		2		0		0		5		1
v		2		0		0		6		1
w		2		0		0		7		1
a		3		0		0		0		1
x		2		0		1		3		1
y		2		0		1		4		1
u		2		0		1		5		1
v		2		0		1		6		1
b		3		0		1		0		1
y		2		0		2		3		1
z		2		0		2		4		1
v		2		0		2		5		1
c		3		0		2		0		1
y		2		0		3		3		1
z		2		0		3		4		1



generateAssemblyCode() {

prog() {
var
block(1) {

constDeclaration() {

varDeclaration() {
x,y,z,v,w;procedure
} /varDeclaration()

procedureDeclaration() {
a;var
block(3) {

constDeclaration() {

varDeclaration() {
x,y,u,v;procedure
} /varDeclaration()

procedureDeclaration() {
b;var
block(5) {

constDeclaration() {

varDeclaration() {
y,z,v;procedure
} /varDeclaration()

procedureDeclaration() {
c;var
block(7) {

constDeclaration() {

varDeclaration() {
y,z;begin
} /varDeclaration()

procedureDeclaration() {

} /procedureDeclaration()

statement() {
z
statement() {
:=1
expression() {

term() {

factor() {
;
} /factor()

} /term()

} /expression()

} /statement()
x
statement() {
:=y
expression() {

term() {

factor() {
+
} /factor()

} /term()
z
term() {

factor() {
+
} /factor()

} /term()
w
term() {

factor() {
end
} /factor()

} /term()

} /expression()

} /statement()

Begin statement closed
;
} /statement()

Got back into the block.

sti=17, old_sti=15, symCount=2

sym=y

sym=z

} block(7)
begin
} /procedureDeclaration()

statement() {
y
statement() {
:=x
expression() {

term() {

factor() {
+
} /factor()

} /term()
u
term() {

factor() {
+
} /factor()

} /term()
w
term() {

factor() {
;
} /factor()

} /term()

} /expression()

} /statement()
call
statement() {
c
EMIT CALL c on level 2
end
} /statement()

Begin statement closed
;
} /statement()

Got back into the block.

sti=17, old_sti=11, symCount=4

sym=y

sym=z

sym=v

sym=c

} block(5)
begin
} /procedureDeclaration()

statement() {
z
statement() {
:=2
expression() {

term() {

factor() {
;
} /factor()

} /term()

} /expression()

} /statement()
u
statement() {
:=z
expression() {

term() {

factor() {
+
} /factor()

} /term()
w
term() {

factor() {
;
} /factor()

} /term()

} /expression()

} /statement()
call
statement() {
b
EMIT CALL b on level 1
end
} /statement()

Begin statement closed
;
} /statement()

Got back into the block.

sti=17, old_sti=6, symCount=5

sym=x

sym=y

sym=u

sym=v

sym=b

} block(3)
begin
} /procedureDeclaration()

statement() {
x
statement() {
:=1
expression() {

term() {

factor() {
;
} /factor()

} /term()

} /expression()

} /statement()
y
statement() {
:=2
expression() {

term() {

factor() {
;
} /factor()

} /term()

} /expression()

} /statement()
z
statement() {
:=3
expression() {

term() {

factor() {
;
} /factor()

} /term()

} /expression()

} /statement()
v
statement() {
:=4
expression() {

term() {

factor() {
;
} /factor()

} /term()

} /expression()

} /statement()
w
statement() {
:=5
expression() {

term() {

factor() {
;
} /factor()

} /term()

} /expression()

} /statement()
x
statement() {
:=v
expression() {

term() {

factor() {
+
} /factor()

} /term()
w
term() {

factor() {
;
} /factor()

} /term()

} /expression()

} /statement()
write
statement() {
z
expression() {

term() {

factor() {
;
} /factor()

} /term()

} /expression()

} /statement()
call
statement() {
a
EMIT CALL a on level 0
;
} /statement()
end
statement() {

} /statement()

Begin statement closed
.
} /statement()

Got back into the block.

sti=17, old_sti=0, symCount=6

sym=x

sym=y

sym=z

sym=v

sym=w

sym=a

} block(1)

printSymbolTable()

Lexeme Table:
symbol		kind		val		level		addr		mark
main		3		1		0		32		0
x		2		0		0		3		1
y		2		0		0		4		1
z		2		0		0		5		1
v		2		0		0		6		1
w		2		0		0		7		1
a		3		2		0		23		1
x		2		0		1		3		1
y		2		0		1		4		1
u		2		0		1		5		1
v		2		0		1		6		1
b		3		3		1		14		1
y		2		0		2		3		1
z		2		0		2		4		1
v		2		0		2		5		1
c		3		4		2		4		1
y		2		0		3		3		1
z		2		0		3		4		1



printAssemblyCode()


Assembly Code:
Line		OP	R	L	M
0		JMP	0	0	32
1		JMP	0	0	23
2		JMP	0	0	14
3		JMP	0	0	4
4		INC	0	0	5
5		LIT	0	0	1
6		STO	0	0	4
7		LOD	0	0	3
8		LOD	1	0	4
9		ADD	0	0	1
10		LOD	1	3	7
11		ADD	0	0	1
12		STO	0	2	3
13		RTN	0	0	0
14		INC	0	0	6
15		LOD	0	1	3
16		LOD	1	1	5
17		ADD	0	0	1
18		LOD	1	2	7
19		ADD	0	0	1
20		STO	0	0	3
21		CAL	0	0	4
22		RTN	0	0	0
23		INC	0	0	7
24		LIT	0	0	2
25		STO	0	1	5
26		LOD	0	1	5
27		LOD	1	1	7
28		ADD	0	0	1
29		STO	0	0	5
30		CAL	0	0	14
31		RTN	0	0	0
32		INC	0	0	8
33		LIT	0	0	1
34		STO	0	0	3
35		LIT	0	0	2
36		STO	0	0	4
37		LIT	0	0	3
38		STO	0	0	5
39		LIT	0	0	4
40		STO	0	0	6
41		LIT	0	0	5
42		STO	0	0	7
43		LOD	0	0	6
44		LOD	1	0	7
45		ADD	0	0	1
46		STO	0	0	3
47		LOD	0	0	5
48		SIO	0	0	1
49		CAL	0	0	23

/printAssemblyCode()


