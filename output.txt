prog() {

block() {
var
constDeclaration() {

varDeclaration() {
x,y,z,v,w;procedure
} /varDeclaration()

procedureDeclaration() {
a;
block() {
var
constDeclaration() {

varDeclaration() {
x,y,u,v;procedure
} /varDeclaration()

procedureDeclaration() {
b;
block() {
var
constDeclaration() {

varDeclaration() {
y,z,v;procedure
} /varDeclaration()

procedureDeclaration() {
c;
block() {
var
constDeclaration() {

varDeclaration() {
y,z;begin
} /varDeclaration()

procedureDeclaration() {

} /procedureDeclaration()

statement() {
z
statement() {
:=1
expression() {

term() {

factor() {
;
} /factor()

} /term()

} /expression()

} /statement()
x
statement() {
:=y
expression() {

term() {

factor() {
+
} /factor()

} /term()
z
term() {

factor() {
+
} /factor()

} /term()
w
term() {

factor() {
;
} /factor()

} /term()

} /expression()

} /statement()
end
statement() {

} /statement()

Begin statement closed
;
} /statement()

Got back into the block.

} /block()
begin
} /procedureDeclaration()

statement() {
y
statement() {
:=x
expression() {

term() {

factor() {
+
} /factor()

} /term()
u
term() {

factor() {
+
} /factor()

} /term()
w
term() {

factor() {
;
} /factor()

} /term()

} /expression()

} /statement()