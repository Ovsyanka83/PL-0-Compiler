Input file:
var sum;
procedure buffer;
	var a;
	procedure sum;
		begin
			read sum;
			read a;
			sum := sum + a;
		end;
	begin
		call sum;
	end;
begin
	call buffer;
	write sum;
end.
/* Add together two inputs.
With this one, the procedure sum comes after the variable sum, and it needs to tell them apart.*/


Lexeme Table:
lexeme		token type
var		29
sum		2
;		18
procedure		30
buffer		2
;		18
var		29
a		2
;		18
procedure		30
sum		2
;		18
begin		21
read		32
sum		2
;		18
read		32
a		2
;		18
sum		2
:=		20
sum		2
+		4
a		2
;		18
end		22
;		18
begin		21
call		27
sum		2
;		18
end		22
;		18
begin		21
call		27
buffer		2
;		18
write		31
sum		2
;		18
end		22
.		19


Raw Lexeme List:
29 2 sum 18 30 2 buffer 18 29 2 a 18 30 2 sum 18 21 32 2 sum 18 32 2 a 18 2 sum 20 2 sum 4 2 a 18 22 18 21 27 2 sum 18 22 18 21 27 2 buffer 18 31 2 sum 18 22 19 

Formatted Lexeme List:
varsym identsym sum semicolonsym procsym identsym buffer semicolonsym varsym identsym a semicolonsym procsym identsym sum semicolonsym beginsym readsym identsym sum semicolonsym readsym identsym a semicolonsym identsym sum becomessym identsym sum plussym identsym a semicolonsym endsym semicolonsym beginsym callsym identsym sum semicolonsym endsym semicolonsym beginsym callsym identsym buffer semicolonsym writesym identsym sum semicolonsym endsym periodsym 


No errors, program is syntactically correct.


Assembly Code:
Line	OP	R	L	M
0	JMP	0	0	15
1	JMP	0	0	12
2	JMP	0	0	3
3	INC	0	0	3
4	SIO	0	0	2
5	STO	0	2	3
6	SIO	0	0	2
7	STO	0	1	3
8	LOD	1	1	3
9	ADD	0	0	1
10	STO	0	2	3
11	RTN	0	0	0
12	INC	0	0	4
13	CAL	0	0	3
14	RTN	0	0	0
15	INC	0	0	4
16	CAL	0	0	12
17	LOD	0	0	3
18	SIO	0	0	1
19	SIO	0	0	3


				pc	bp	sp
Initial values			0	999	1000
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

0 jmp 0 0 15			15	999	1000
Registers: 0 0 0 0 0 0 0 0
Stack:

15 inc 0 0 4			16	999	996
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 0

16 cal 0 0 12			12	995	996
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 0

12 inc 0 0 4			13	995	992
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 0 999 | 999 17 0

13 cal 0 0 3			3	991	992
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 0 999 | 999 17 0

3 inc 0 0 3			4	991	989
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 0 999 | 999 17 0 995 995 | 14


Please enter an integer: 
4 sio 0 0 2			5	991	989
Registers: 5 0 0 0 0 0 0 0
Stack: 0 0 0 0 999 | 999 17 0 995 995 | 14

5 sto 0 2 3			6	991	989
Registers: 5 0 0 0 0 0 0 0
Stack: 0 0 0 5 999 | 999 17 0 995 995 | 14


Please enter an integer: 
6 sio 0 0 2			7	991	989
Registers: 6 0 0 0 0 0 0 0
Stack: 0 0 0 5 999 | 999 17 0 995 995 | 14

7 sto 0 1 3			8	991	989
Registers: 6 0 0 0 0 0 0 0
Stack: 0 0 0 5 999 | 999 17 6 995 995 | 14

8 lod 1 1 3			9	991	989
Registers: 6 6 0 0 0 0 0 0
Stack: 0 0 0 5 999 | 999 17 6 995 995 | 14

9 add 0 0 1			10	991	989
Registers: 12 6 0 0 0 0 0 0
Stack: 0 0 0 5 999 | 999 17 6 995 995 | 14

10 sto 0 2 3			11	991	989
Registers: 12 6 0 0 0 0 0 0
Stack: 0 0 0 12 999 | 999 17 6 995 995 | 14

11 rtn 0 0 0			14	995	992
Registers: 12 6 0 0 0 0 0 0
Stack: 0 0 0 12 999 | 999 17 6

14 rtn 0 0 0			17	999	996
Registers: 12 6 0 0 0 0 0 0
Stack: 0 0 0 12

17 lod 0 0 3			18	999	996
Registers: 12 6 0 0 0 0 0 0
Stack: 0 0 0 12


Register 0: 12

18 sio 0 0 1			19	999	996
Registers: 12 6 0 0 0 0 0 0
Stack: 0 0 0 12

19 sio 0 0 3			20	999	996
Registers: 12 6 0 0 0 0 0 0
Stack: 0 0 0 12

