Input file:
var a;
procedure test;
	begin
		read a;
	end;
begin
	call test;
	write a;
end.

/*Procedures can use their ancestors' variables. */

Lexeme Table:
lexeme		token type
var		29
a		2
;		18
procedure		30
test		2
;		18
begin		21
read		32
a		2
;		18
end		22
;		18
begin		21
call		27
test		2
;		18
write		31
a		2
;		18
end		22
.		19


Raw Lexeme List:
29 2 a 18 30 2 test 18 21 32 2 a 18 22 18 21 27 2 test 18 31 2 a 18 22 19 

Formatted Lexeme List:
varsym identsym a semicolonsym procsym identsym test semicolonsym beginsym readsym identsym a semicolonsym endsym semicolonsym beginsym callsym identsym test semicolonsym writesym identsym a semicolonsym endsym periodsym 


No errors, program is syntactically correct.


Assembly Code:
Line	OP	R	L	M
0	JMP	0	0	6
1	JMP	0	0	2
2	INC	0	0	3
3	SIO	0	0	2
4	STO	0	1	3
5	RTN	0	0	0
6	INC	0	0	4
7	CAL	0	0	2
8	LOD	0	0	3
9	SIO	0	0	1
10	SIO	0	0	3


				pc	bp	sp
Initial values			0	999	1000
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

0 jmp 0 0 6			6	999	1000
Registers: 0 0 0 0 0 0 0 0
Stack:

6 inc 0 0 4			7	999	996
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 0

7 cal 0 0 2			2	995	996
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 0

2 inc 0 0 3			3	995	993
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 0 999 | 999 8


Please enter an integer: 
3 sio 0 0 2			4	995	993
Registers: 9 0 0 0 0 0 0 0
Stack: 0 0 0 0 999 | 999 8

4 sto 0 1 3			5	995	993
Registers: 9 0 0 0 0 0 0 0
Stack: 0 0 0 9 999 | 999 8

5 rtn 0 0 0			8	999	996
Registers: 9 0 0 0 0 0 0 0
Stack: 0 0 0 9

8 lod 0 0 3			9	999	996
Registers: 9 0 0 0 0 0 0 0
Stack: 0 0 0 9


Register 0: 9

9 sio 0 0 1			10	999	996
Registers: 9 0 0 0 0 0 0 0
Stack: 0 0 0 9

10 sio 0 0 3			11	999	996
Registers: 9 0 0 0 0 0 0 0
Stack: 0 0 0 9

