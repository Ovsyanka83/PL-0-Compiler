Input file:
var sum;
procedure a;
	var a;
	begin
		read a;
		sum := sum + a;
		if a <> 0 then call a;
	end;
begin
	call a;
	write sum;
end.

/* Expands on test2 by making it sum all the inputs iuntil you enter 0, thus making sure 
it's looking for the correct a each time when there's a bunch of them. */


Lexeme Table:
lexeme		token type
var		29
sum		2
;		18
procedure		30
a		2
;		18
var		29
a		2
;		18
begin		21
read		32
a		2
;		18
sum		2
:=		20
sum		2
+		4
a		2
;		18
if		23
a		2
<>		10
0		3
then		24
call		27
a		2
;		18
end		22
;		18
begin		21
call		27
a		2
;		18
write		31
sum		2
;		18
end		22
.		19


Raw Lexeme List:
29 2 sum 18 30 2 a 18 29 2 a 18 21 32 2 a 18 2 sum 20 2 sum 4 2 a 18 23 2 a 10 3 0 24 27 2 a 18 22 18 21 27 2 a 18 31 2 sum 18 22 19 

Formatted Lexeme List:
varsym identsym sum semicolonsym procsym identsym a semicolonsym varsym identsym a semicolonsym beginsym readsym identsym a semicolonsym identsym sum becomessym identsym sum plussym identsym a semicolonsym ifsym identsym a neqsym numbersym 0 thensym callsym identsym a semicolonsym endsym semicolonsym beginsym callsym identsym a semicolonsym writesym identsym sum semicolonsym endsym periodsym 


No errors, program is syntactically correct.


Assembly Code:
Line	OP	R	L	M
0	JMP	0	0	15
1	JMP	0	0	2
2	INC	0	0	4
3	SIO	0	0	2
4	STO	0	0	3
5	LOD	0	1	3
6	LOD	1	0	3
7	ADD	0	0	1
8	STO	0	1	3
9	LOD	0	0	3
10	LIT	1	0	0
11	NEQ	0	0	1
12	JPC	0	0	14
13	CAL	0	0	3
14	RTN	0	0	0
15	INC	0	0	4
16	CAL	0	0	2
17	LOD	0	0	3
18	SIO	0	0	1
19	SIO	0	0	3


				pc	bp	sp
Initial values			0	999	1000
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

0 jmp 0 0 15			15	999	1000
Registers: 0 0 0 0 0 0 0 0
Stack:

15 inc 0 0 4			16	999	996
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 0

16 cal 0 0 2			2	995	996
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 0

2 inc 0 0 4			3	995	992
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 0 999 | 999 17 0


Please enter an integer: 
3 sio 0 0 2			4	995	992
Registers: 2 0 0 0 0 0 0 0
Stack: 0 0 0 0 999 | 999 17 0

4 sto 0 0 3			5	995	992
Registers: 2 0 0 0 0 0 0 0
Stack: 0 0 0 0 999 | 999 17 2

5 lod 0 1 3			6	995	992
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 0 999 | 999 17 2

6 lod 1 0 3			7	995	992
Registers: 0 2 0 0 0 0 0 0
Stack: 0 0 0 0 999 | 999 17 2

7 add 0 0 1			8	995	992
Registers: 2 2 0 0 0 0 0 0
Stack: 0 0 0 0 999 | 999 17 2

8 sto 0 1 3			9	995	992
Registers: 2 2 0 0 0 0 0 0
Stack: 0 0 0 2 999 | 999 17 2

9 lod 0 0 3			10	995	992
Registers: 2 2 0 0 0 0 0 0
Stack: 0 0 0 2 999 | 999 17 2

10 lit 1 0 0			11	995	992
Registers: 2 0 0 0 0 0 0 0
Stack: 0 0 0 2 999 | 999 17 2

11 neq 0 0 1			12	995	992
Registers: 1 0 0 0 0 0 0 0
Stack: 0 0 0 2 999 | 999 17 2

12 jpc 0 0 14			13	995	992
Registers: 1 0 0 0 0 0 0 0
Stack: 0 0 0 2 999 | 999 17 2

13 cal 0 0 3			3	991	992
Registers: 1 0 0 0 0 0 0 0
Stack: 0 0 0 2 999 | 999 17 2


Please enter an integer: 
3 sio 0 0 2			4	991	992
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 2 999 | 999 17 2

4 sto 0 0 3			5	991	992
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 2 999 | 999 17 2

5 lod 0 1 3			6	991	992
Registers: 2 0 0 0 0 0 0 0
Stack: 0 0 0 2 999 | 999 17 2

6 lod 1 0 3			7	991	992
Registers: 2 0 0 0 0 0 0 0
Stack: 0 0 0 2 999 | 999 17 2

7 add 0 0 1			8	991	992
Registers: 2 0 0 0 0 0 0 0
Stack: 0 0 0 2 999 | 999 17 2

8 sto 0 1 3			9	991	992
Registers: 2 0 0 0 0 0 0 0
Stack: 0 0 0 2 999 | 999 17 2

9 lod 0 0 3			10	991	992
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 2 999 | 999 17 2

10 lit 1 0 0			11	991	992
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 2 999 | 999 17 2

11 neq 0 0 1			12	991	992
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 2 999 | 999 17 2

12 jpc 0 0 14			14	991	992
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 2 999 | 999 17 2

14 rtn 0 0 0			14	995	992
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 2 999 | 999 17 2

14 rtn 0 0 0			17	999	996
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 2

17 lod 0 0 3			18	999	996
Registers: 2 0 0 0 0 0 0 0
Stack: 0 0 0 2


Register 0: 2

18 sio 0 0 1			19	999	996
Registers: 2 0 0 0 0 0 0 0
Stack: 0 0 0 2

19 sio 0 0 3			20	999	996
Registers: 2 0 0 0 0 0 0 0
Stack: 0 0 0 2

