Input file:
var x;

procedure a;

    var z;

    begin
        x := 1;
        write x
    end;

call a
.

Lexeme Table:
lexeme		token type
var		29
x		2
;		18
procedure		30
a		2
;		18
var		29
z		2
;		18
begin		21
x		2
:=		20
1		3
;		18
write		31
x		2
end		22
;		18
call		27
a		2
.		19


Raw Lexeme List:
29 2 x 18 30 2 a 18 29 2 z 18 21 2 x 20 3 1 18 31 2 x 22 18 27 2 a 19 

Formatted Lexeme List:
varsym identsym x semicolonsym procsym identsym a semicolonsym varsym identsym z semicolonsym beginsym identsym x becomessym numbersym 1 semicolonsym writesym identsym x endsym semicolonsym callsym identsym a periodsym 


No errors, program is syntactically correct.


Assembly Code:
Line	OP	R	L	M
0	JMP	0	0	8
1	JMP	0	0	2
2	INC	0	0	4
3	LIT	0	0	1
4	STO	0	1	3
5	LOD	0	1	3
6	SIO	0	0	1
7	RTN	0	0	0
8	INC	0	0	4
9	CAL	0	0	2
10	SIO	0	0	3


				pc	bp	sp
Initial values			0	999	1000
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

0 jmp 0 0 8			8	999	1000
Registers: 0 0 0 0 0 0 0 0
Stack:

8 inc 0 0 4			9	999	996
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 0

9 cal 0 0 2			2	995	996
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 0

2 inc 0 0 4			3	995	992
Registers: 0 0 0 0 0 0 0 0
Stack: 0 0 0 0 999 | 999 10 0

3 lit 0 0 1			4	995	992
Registers: 1 0 0 0 0 0 0 0
Stack: 0 0 0 0 999 | 999 10 0

4 sto 0 1 3			5	995	992
Registers: 1 0 0 0 0 0 0 0
Stack: 0 0 0 1 999 | 999 10 0

5 lod 0 1 3			6	995	992
Registers: 1 0 0 0 0 0 0 0
Stack: 0 0 0 1 999 | 999 10 0


Register 0: 1

6 sio 0 0 1			7	995	992
Registers: 1 0 0 0 0 0 0 0
Stack: 0 0 0 1 999 | 999 10 0

7 rtn 0 0 0			10	999	996
Registers: 1 0 0 0 0 0 0 0
Stack: 0 0 0 1

10 sio 0 0 3			11	999	996
Registers: 1 0 0 0 0 0 0 0
Stack: 0 0 0 1

